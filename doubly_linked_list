#include <bits/stdc++.h>
#define endl '\n'
#define strim stringstream
#define ll long long int
#define inf INT_MAX
#define mod %
#define find_array_max *max_element(arr.begin(), arr.end());
#define find_array_min *min_element(arr.begin(), arr.end());
#define pii pair<int, int>
#define pll pair<ll, ll>
#define negInf INT_MIN
#define left_range(i, x, y) for (int i = x; i <= y; i++)
#define right_range(i, x, y) for (int i = y; i >= x; i--)
void hey_output()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}
using namespace std;
const int N = 1e5 + 7;
class Node
{
public:
    int val;
    Node *next;
    Node *prev;
    Node(int val)
    {
        this->val = val;
        this->next = nullptr;
        this->prev = nullptr;
    }
};
int cnt = 0;

void insert_at_tail(Node *&head, Node *&tail, int val)
{
    Node *newNode = new Node(val);

    if (tail == nullptr)
    {
        head = newNode;
        tail = newNode;
        return;
    }
    tail->next = newNode;
    newNode->prev = tail;
    // tail = tail->next;
    tail = newNode;
    // cnt++;
}

void insert_at_any_pos(Node *head, int val, int pos)
{
    Node *newNode = new Node(val);
    Node *tmp = head;
    for (int i = 1; i <= pos - 1; i++)
    {
        tmp = tmp->next;
    }
    newNode->next = tmp->next;
    tmp->next = newNode;
    newNode->prev = tmp;
    tmp->next->prev = newNode;
    // tmp->next = newNode;
    //  cnt++;
}
void insert_at_head(Node *&head, Node *&tail, int val)
{
    Node *newNode = new Node(val);
    if (head == nullptr)
    {
        head = newNode;
        tail = newNode;
        return;
    }
    newNode->next = head;
    head->prev = newNode;
    head = newNode;
}
void delete_tail(Node *&tail)
{
    if (tail == nullptr)
    {
        cout << "linked list is empty" << endl;
    }
    Node *delete_node = tail;
    tail = tail->prev;
    delete delete_node;
    tail->next = nullptr;
}
void delete_head(Node *&head)
{
    if (head == nullptr)
    {
        cout << "Linked List empty" << endl;
        return;
    }
    Node *tmp = head;
    head = head->next;
    delete tmp;
    head->prev = nullptr;
}
void delete_at_pos(Node *head, int pos)
{
    Node *tmp = head;
    for (int i = 1; i <= pos - 1; i++)
        tmp = tmp->next;
    Node *delete_node = tmp->next;
    tmp->next = tmp->next->next;
    tmp->next->prev = tmp;
    delete delete_node;
}
int size(Node *head)
{
    int cnt = 0;
    Node *tmp = head;
    while (tmp != nullptr)
    {

        tmp = tmp->next;
        cnt++;
    }
    return cnt;
}

void output(Node *head)
{
    Node *tmp = head;
    while (tmp != nullptr)
    {
        cout << tmp->val << " ";
        tmp = tmp->next;
    }
}
void go_on()
{
    Node *head = nullptr;
    Node *tail = nullptr;
    // while (true)
    // {
    // int val;
    // cin >> val;
    // if (val == -1)
    // break;
    // input(head, tail, val);
    // }
    // output(head);
    while (true)
    {
        cout << "output press 0" << endl;
        cout << "insert at tail press 1" << endl;
        cout << "insert at pos press 2" << endl;
        cout << "insert at head press 3" << endl;
        cout << "delete at tail press 4" << endl;
        cout << "delete head press 5" << endl;
        cout << "delete specifice position press 6" << endl;
        cout << "press 7 for terminate" << endl;
        int pos;
        cin >> pos;
        if (pos == 1)
        {
            int val;
            cin >> val;
            insert_at_tail(head, tail, val);
        }
        else if (pos == 2)
        {
            int val, p;
            cin >> val >> p;
            if (p >= size(head))
                cout << "ur suggest value dont availave in the linked list" << endl;
            else if (p == 0)
                insert_at_head(head, tail, val);
            else
                insert_at_any_pos(head, val, p);
        }
        else if (pos == 3)
        {
            int val;
            cin >> val;
            insert_at_head(head, tail, val);
        }
        else if (pos == 4)
        {
            delete_tail(tail);
        }
        else if (pos == 5)
        {
            delete_head(head);
        }
        else if (pos == 6)
        {
            int p;
            cin >> p;

            delete_at_pos(head, p);
        }
        else if (pos == 0)
        {
            output(head);
            cout << endl;
            cout << "size : " << size(head) << endl;
        }
        else if (pos == 7)
            break;
    }
}

int32_t main()
{
    // ios_base::sync_with_stdio(false);
    // cin.tie(NULL);
    // hey_output();
    go_on();

    return 0;
}
